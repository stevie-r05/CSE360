/*
* DBCourses.cpp
*
*  Created on: Mar 1, 2012
*      Author: Ian
*/
#include "stdafx.h"
#include "DB_QuizQuestions.h"
#include "timingClass.h"

namespace CSE360Project {

	DB_QuizQuestions::DB_QuizQuestions() {
		database_file = "Quiz_questions.db";
		database_info_file = database_file+".info";

		//Load Data
		this->LoadData<db_question_data>(question_data);
	}

	void DB_QuizQuestions::DeleteQuestion(int question_id) {
		int vector_index = getVectorIndex(question_id);

		if (vector_index >= 0)
			question_data.erase(question_data.begin()+vector_index);

		this->Write();
	}

	void DB_QuizQuestions::DeleteQuiz(int qid) {
		for (int i = 0; i < (int) question_data.size(); i++) {
			if (question_data[i].qid == qid) {
				question_data.erase(question_data.begin()+i);
				i++;
			}
		}

		this->Write();
	}

	int DB_QuizQuestions::Insert(db_question_data *question_data) {
		//Auto-assign UID
		question_data->question_id = ++lastID;

		this->question_data.push_back(*question_data);

		//Parameter lets the writ method know this is insertion.
		this->Write();
		
		return lastID;
	}

	vector<db_question_data> DB_QuizQuestions::getQuestions(int qid) {
		vector<db_question_data> packaged_data;

		for (int i = 0; i < (int) question_data.size(); i++) {
			if (question_data[i].qid == qid) {
				packaged_data.push_back(question_data[i]);
			}
		}

		return packaged_data;
	}
		
	db_question_data DB_QuizQuestions::getQuestionData(int question_id) {
		int vector_index = getVectorIndex(question_id);

		return question_data[vector_index];
	}
		
	int DB_QuizQuestions::getCorrectAnswer(int question_id) {
		int vector_index = getVectorIndex(question_id);

		return question_data[vector_index].correct_answer;
	}
		
	int DB_QuizQuestions::getQID(int question_id) {
		int vector_index = getVectorIndex(question_id);

		return question_data[vector_index].qid;
	}

	void DB_QuizQuestions::outputAllData() {
		if (!question_data.empty()) {
			for (int i = 0; i < (int) question_data.size(); i++) {
				cout << i+1 << ") ";
				cout << "question_id: " << question_data[i].question_id << endl; //Course ID - Autogenerated in this class.
				cout << "qid: " << question_data[i].qid << endl;
				cout << "question: " << question_data[i].question << endl;
				cout << "answer1: " << question_data[i].answer1 << endl;
				cout << "answer2: " << question_data[i].answer2 << endl;
				cout << "answer3: " << question_data[i].answer3 << endl;
				cout << "answer4: " << question_data[i].answer4 << endl;
				cout << "correct_answer: " << question_data[i].correct_answer << endl;
				cout << "order: " << question_data[i].order << endl;
				cout << "image_location: " << question_data[i].image_location << endl;
				cout << endl << endl;
			}
		} else {
			cout << "Quiz Question Data is empty." << endl;
		}
	}

	int DB_QuizQuestions::getVectorIndex(int question_id) {
		for (int i = 0; i < (int) question_data.size(); i++) {
			if (question_id == question_data[i].question_id) {
				return i;
			}
		}

		//Vector index of < 0 indicates failure to locate record.
		return -1;
	}

	void DB_QuizQuestions::Write() {
		this->WriteData<db_question_data>(question_data);	
	}

	void DB_QuizQuestions::ClearData() {
		question_data.clear();
	}

	void DB_QuizQuestions::orderQuestions() {
		//sort is std c++
		//compareOrder is defined in standard_functions.h
		sort(question_data.begin(),question_data.end(),compareOrder<db_question_data>);
	}

	DB_QuizQuestions::~DB_QuizQuestions() {
		this->ClearData();
	}
} /* namespace CSE360Project */