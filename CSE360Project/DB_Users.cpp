/*
* DBUsers.cpp
*
*  Created on: Mar 1, 2012
*      Author: Ian
*/
#include "stdafx.h"
#include "DB_Users.h"
#include "timingClass.h"

namespace CSE360Project {

	DB_Users::DB_Users() {
		database_file = "Users.db";

		//Open File
		this->Open(ios_base::in);

		//Load Data
		this->LoadData();

		//Close Data
		this->Close();
	}

	void DB_Users::LoadData() {
		//Clear data in preparation for loading data.  If it's empty, will have no effect
		clearDataArray<db_users_data>(user_data);

		//Open if not already open
		this->Open(ios_base::in);

		//Load Data
		//username password lastName firstName securityQuestion securityAnswer userRole
		//	0		1		2			3		4					5			6
		int struct_position = 0;
		int vector_index = 0;
		db_users_data *row;
		string line;
		char c, prev_c;

		//Need to add increment to struct_position
		//Need to add increment and way to add new vector row.
		while (in.good()) {
			if (struct_position == 0) {
				row = new db_users_data;
			}

			c = in.get();
			if (in.good()) {
				if (c == '\t') {
					cout << line << endl;
					line.erase();
				} else if (c == '\n') {
					cout << line;
					line.erase();
				} else {
					switch (struct_position) {
					case 0:
						user_data[vector_index].userName << c;
						break;
					case 1:
						user_data[vector_index].password << c;
						break;
					case 2:
						user_data[vector_index].lastName << c;
						break;
					case 3:
						user_data[vector_index].firstName << c;
						break;
					case 4:
						user_data[vector_index].securityQuestion << c;
						break;
					case 5:
						user_data[vector_index].securityAnswer << c;
						break;
					case 6:
						switch (c) {
						case user_roles_t::admin:
							user_data[vector_index].userRole  = user_roles_t::admin;
							break;
						case user_roles_t::teacher:
							user_data[vector_index].userRole  = user_roles_t::teacher;
							break;
						default:
							user_data[vector_index].userRole  = user_roles_t::student;
							break;
						}
					}
					line += c;
				}
				prev_c = c;
			}
		}


		//Close
		this->Close();
	}

	void DB_Users::Write() {
		//Open file
		this->Open(ios_base::out);

		timingClass timing;
		timing.tic();

		//Write Data
		int data_array_size = (int) user_data.size();

		for (int i = 0; i < data_array_size; i++) {
			out << uid << '\t'; //User ID - Autogenerated in this class.
			out << username << '\t';
			out << password << '\t';
			out << lastName << '\t';
			out << firstName << '\t';
			out << securityQuestion << '\t';
			out << securityAnswer << '\t';
			out << userRole << '\n';
		}

		out.close();
		this->writeBenchmark(record_count,timing.toc());
	}

	int DB_Users::Insert(db_users_data *user_data) {

		return 0;
	}

	bool DB_Users::validateUser(string username, string password) {
		int vector_index = getVectorIndex(username);

		if (vector_index >= 0 && password.compare(user_data[vector_index].password) == 0) {
			return true;
		}

		return false;
	}

	bool DB_Users::checkSecurityAnswer(string username, string answer) {
		int vector_index = getVectorIndex(username);

		if (vector_index >= 0 && answer.compare(user_data[vector_index].securityAnswer) == 0) {
			return true;
		}

		return false;
	}

	user_roles_t DB_Users::getUserRole(int uid) {
		return user_data[getVectorIndex(uid)].userRole;
	}

	string DB_Users::getUsername(int uid) {
		return user_data[ getVectorIndex(uid) ].username;
	}

	string DB_Users::getFirstname(int uid) {
		return user_data[ getVectorIndex(uid) ].firstName;
	}

	string DB_Users::getLastname(int uid) {
		return user_data[ getVectorIndex(uid) ].lastName;
	}

	string DB_Users::getSecurityQuestion(string username) {
		int vector_index = getVectorIndex(username);

		if (vector_index >= 0)
			return user_data[ vector_index ].securityQuestion;

		return "invalid";
	}

	int DB_Users::getUID(string username) {
		int vector_index = getVectorIndex(username);
		
		if (vector_index >= 0)
			return user_data[vector_index].uid;

		return 0;
	}

	int DB_Users::getVectorIndex(string username) {
		for (int i = 0; i < (int) user_data.size(); i++) {
			if (username.compare(user_data[i].username) == 0) {
				return i;
			}
		}

		return -1;
	}

	int DB_Users::getVectorIndex(int uid) {
		for (int i = 0; i < (int) user_data.size(); i++) {
			if (uid == user_data[i].uid) {
				return i;
			}
		}

		return -1;
	}

	DB_Users::~DB_Users() {
		// TODO Auto-generated destructor stub
	}

} /* namespace CSE360Project */